### July 18, 2020

[x] I think stdlib should be available via fpm and possibly included by default. It would
    be a shame if there were not some integration between the projects. 


A few comments on fpm ([Fortran Package Manager](https://github.com/fortran-lang/fpm))

   * I could not find a way using "fpm build" or "fpm run" to work with
     programs that required external libraries (not always available
     statically) like X11 Windows and ncurses and various math libraries
     installed on my machine. Is there some description of how to set
     compiler options I missed?

   * I could not get an "fpm" command to recognize any compiler except
     gfortran(1).

   * Some type of "install" mode is highly desirable to place files in a single location.
     It should include some way to handle data and documentation files
     as well as the *.a and *.mod files and executables. Otherwise, seperate program
     development ends up producing a lot of duplication if each program requires the
     same packages, or you are forced to keep all development in the same file tree.

   * For builds that build many programs having to put each one in a seperate directory
     creates a very awkward file layout. Some type of option for executables where
     you could give a list of specific files to use for building a program might be
     a solution. Automatically assuming all files at or below the path is not always
     desirable even though it makes some cases very simple to configure.

   * The "run" subcommand is fine for a single program, but if you have a number of
     tests or programs it would be nice if it had a "list" option.

   * being able to search and list entries in a central registry is apparently planned (?)
     but it would at least be nice if
     [packages](https://fortran-lang.org/packages) listed at
     https://fortran-lang.org were marked as to whether fpm support
     was enabled.  As a substitute for a search/list feature I did a
     global search (on just github) of the filename "fpm.toml" and at
     least on that site there were not many hits, so maybe this is too
     early anyway.

   * The install of fpm(1) required way too much infrastructure. A Fortran-based version
     is planned?

    Here is a list of my public repositories that are fpm-enabled:

        [dependencies]
        # worked well with simple single-module projects
         M_kracken95   = { git = "https://github.com/urbanjost/M_kracken95.git" }
         M_cli         = { git = "https://github.com/urbanjost/M_cli.git"  }
         M_calculator  = { git = "https://github.com/urbanjost/M_calculator.git" }
         M_change      = { git = "https://github.com/urbanjost/M_change.git" }
         M_color       = { git = "https://github.com/urbanjost/M_color.git" }
         M_history     = { git = "https://github.com/urbanjost/M_history.git" }
         M_io          = { git = "https://github.com/urbanjost/M_io.git" }
         M_msg         = { git = "https://github.com/urbanjost/M_msg.git" }
         M_time        = { git = "https://github.com/urbanjost/M_time.git" }
         M_strings     = { git = "https://github.com/urbanjost/M_strings.git" }
         # uses ISO_C_BINDING but no C wrapper code. fpm(1) worked well
         M_process     = { git = "https://github.com/urbanjost/M_process.git" }
         #
         # required creating makefiles:
         M_system      = { git = "https://github.com/urbanjost/M_system.git" }
         # this did not work satisfactorily ...
         M_draw        = { git = "https://github.com/urbanjost/M_draw.git" }

For projects not requiring other libraries or C wrappers and just comprised of
a few modules I had no problems.

As soon as I needed some C wrappers or needed to build A C library as part of
the project it got very difficult. I really could not come up with a satisfactory
build of the M_draw.f90 module, as it requires data files and C routines; and I
tried a lot of variations. It is not clearly shown in the documentation just how
you can use a customized build script or makefile and still have it work cleanly
with fpm.

   * Initializing an existing .git directory with "fpm init" was problematic as it
     always tries to initialize git and overwrites README.md. To use "fpm
     init" required Moving the original directory; making new one with
     "fpm init"; removing .git and them moving files back.  Would be
     nice if instead of the "Jane Doe" fpm.toml file created that it
     use names from .gitconfig for initial values, and not overwrite
     existing files like README.md or initialize git(1) if .git exists
     if you run it in an existing directory.

   * It should at least be noted in the documentation that there is no "fpm clean"
     option

   * .F90 files appear to be supported, but with no way to specify preprocessor
     options; since preprocessors vary between compilers this could get complicated
     but I was wondering whether a specific preprocessor would be supported in the
     future and how options can be passed to one now.

   * It was easier to just create a Makefile for any legacy codes with routines not
     in modules or when C wrappers were needed, but worked quite well for single-module
     projects. It was nice to be able to write a program that needed access to file
     system information, manipulated strings, printed date and time information and
     cracked the command line almost like that was a natural part of Fortran.
