###############################################################################
Finding out the name of the original repository you cloned from in Git

When you do your first clone using the syntax

   git clone username@server:gitRepo.git

Is it possible using your local repository to find the name of that
initial clone?

(So in the above example, find gitRepo.git.)

Related post - How do you get the Git repository's name in some Git repository?

In the repository root, the .git/config file holds all information about
remote repositories and branches. In your example, you should look for
something like:

[remote "origin"]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = server:gitRepo.git

Also, the Git command 

   git remote -v 

shows the remote repository name and
URL. The "origin" remote repository usually corresponds to the original
repository, from which the local copy was cloned.

You can also use 

   git remote show origin 

to see much more information about just that remote.

Looks like these two methods are in the Answer are equivalent - it seems
git remote -v just reads and writes .git/config.

   git config --get remote.origin.url

Agreed; this is best because it doesn't require a connection/auth
to the git remote server. OP asked "using your local repository"
but git remote show origin calls out to network. 

This is quick Bash command, that you're probably searching for, will
print only a basename of the remote repository:

Where you fetch from:

   basename $(git remote show -n origin | grep Fetch | cut -d: -f2-)

Alternatively where you push to:

   basename $(git remote show -n origin | grep Push | cut -d: -f2-)

Especially the -n option makes the command much quicker.
I use this:

   basename $(git remote get-url origin) .git

Which returns something like gitRepo. (Remove the .git at the end of
the command to return something like gitRepo.git.)

I stumbled on this question trying to get the organization/repo string
from a git host like github or gitlab.

This is working for me:

   git config --get remote.origin.url | sed -e 's/^git@.*:\([[:graph:]]*\).git/\1/'

It uses sed to replace the output of the git config command with just
the organization and repo name.

Something like github/scientist would be matched by the character class
[[:graph:]] in the regular expression.

The \1 tells sed to replace everything with just the matched characters.

    git config --get remote.origin.url | sed -e 's/^git@.*:\([[:graph:]]*\).git/\1/' 

   #!/usr/bin/env bash
   repoSlug="$(git config --get remote.origin.url | cut -d/ -f5 | cut -d. -f1)"
   echo ${repoSlug}

Powershell version of command for git repo name:

   (git config --get remote.origin.url) -replace '.*/' -replace '.git'
###############################################################################
