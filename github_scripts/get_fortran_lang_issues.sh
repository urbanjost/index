#
# SOME WAY TO PULL ALL ISSUES FROM A SITE?
#https://github.com/j3-fortran/fortran_proposals/issues?page=6&q=is%3Aissue+is%3Aopen
#curl -i "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173"
#curl -i 'https://api.github.com/repos/j3-fortran/fortran_proposals/issues/1-?'
curl -i 'https://api.github.com/repos/j3-fortran/fortran_proposals/issues/1-1000'
exit
################################################################################
# DELETE REPOSITORY CREATED FOR PULL REQUEST
https://github.com/urbanjost/fpm-registry/settings?confirm_delete=yes
################################################################################
curl -i "https://api.github.com/repos/j3-fortran/fortran_proposals/issues" -u "j3-fortran"
exit

curl -i "https://api.github.com/repos/JabRef/jabref/issues" -u "<user-name>"

This uses the GitHub API "List issues for a repository", available for anyone on public repositories.
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173",
HTTP/1.1 200 OK
Server: GitHub.com
Date: Fri, 04 Sep 2020 16:58:50 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 109376
Status: 200 OK
Cache-Control: public, max-age=60, s-maxage=60
Vary: Accept
ETag: "c28a24a4751c5c687579f4e46df70894"
X-GitHub-Media-Type: github.v3; format=json
Link: <https://api.github.com/repositories/215442454/issues?page=2>; rel="next", <https://api.github.com/repositories/215442454/issues?page=5>; rel="last"
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 58
X-RateLimit-Reset: 1599242317
X-RateLimit-Used: 2
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset
Access-Control-Allow-Origin: *
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Frame-Options: deny
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Content-Security-Policy: default-src 'none'
Vary: Accept-Encoding, Accept, X-Requested-With
X-GitHub-Request-Id: A156:20F9:129684:20B292:5F52724A

[
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/177",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/177/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/177/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/177/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/177",
    "id": 673085252,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDYzMDEwOTI3",
    "number": 177,
    "title": "Assert",
    "user": {
      "login": "wclodius2",
      "id": 65470906,
      "node_id": "MDQ6VXNlcjY1NDcwOTA2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/65470906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wclodius2",
      "html_url": "https://github.com/wclodius2",
      "followers_url": "https://api.github.com/users/wclodius2/followers",
      "following_url": "https://api.github.com/users/wclodius2/following{/other_user}",
      "gists_url": "https://api.github.com/users/wclodius2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wclodius2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wclodius2/subscriptions",
      "organizations_url": "https://api.github.com/users/wclodius2/orgs",
      "repos_url": "https://api.github.com/users/wclodius2/repos",
      "events_url": "https://api.github.com/users/wclodius2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wclodius2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-08-04T21:10:20Z",
    "updated_at": "2020-08-05T22:14:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/pulls/177",
      "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/177",
      "diff_url": "https://github.com/j3-fortran/fortran_proposals/pull/177.diff",
      "patch_url": "https://github.com/j3-fortran/fortran_proposals/pull/177.patch"
    },
    "body": "A paper on design by contract that, among other things, proposes the addition of an ASSERT statement\r\nto Fortran 202y.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/176",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/176/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/176/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/176/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/176",
    "id": 662336906,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDUzOTAzNzA3",
    "number": 176,
    "title": "Add namespace modules proposal revision by @wclodius2",
    "user": {
      "login": "milancurcic",
      "id": 4133310,
      "node_id": "MDQ6VXNlcjQxMzMzMTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4133310?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milancurcic",
      "html_url": "https://github.com/milancurcic",
      "followers_url": "https://api.github.com/users/milancurcic/followers",
      "following_url": "https://api.github.com/users/milancurcic/following{/other_user}",
      "gists_url": "https://api.github.com/users/milancurcic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milancurcic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milancurcic/subscriptions",
      "organizations_url": "https://api.github.com/users/milancurcic/orgs",
      "repos_url": "https://api.github.com/users/milancurcic/repos",
      "events_url": "https://api.github.com/users/milancurcic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milancurcic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-20T22:38:14Z",
    "updated_at": "2020-07-31T18:53:35Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/pulls/176",
      "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/176",
      "diff_url": "https://github.com/j3-fortran/fortran_proposals/pull/176.diff",
      "patch_url": "https://github.com/j3-fortran/fortran_proposals/pull/176.patch"
    },
    "body": "Uploaded for @wclodius2. Related to issue #1.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/175",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/175/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/175/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/175/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/175",
    "id": 655329080,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODQ5NTM4",
    "number": 175,
    "title": "Revised version of the default arguments proposal",
    "user": {
      "login": "wclodius2",
      "id": 65470906,
      "node_id": "MDQ6VXNlcjY1NDcwOTA2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/65470906?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wclodius2",
      "html_url": "https://github.com/wclodius2",
      "followers_url": "https://api.github.com/users/wclodius2/followers",
      "following_url": "https://api.github.com/users/wclodius2/following{/other_user}",
      "gists_url": "https://api.github.com/users/wclodius2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wclodius2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wclodius2/subscriptions",
      "organizations_url": "https://api.github.com/users/wclodius2/orgs",
      "repos_url": "https://api.github.com/users/wclodius2/repos",
      "events_url": "https://api.github.com/users/wclodius2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wclodius2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-07-12T04:31:06Z",
    "updated_at": "2020-07-26T00:12:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/pulls/175",
      "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/175",
      "diff_url": "https://github.com/j3-fortran/fortran_proposals/pull/175.diff",
      "patch_url": "https://github.com/j3-fortran/fortran_proposals/pull/175.patch"
    },
    "body": "I have written a revision of the paper by @milancurcic, @jvdp1, and @zjibben that attempts to address most of the issues raised at the Feb. 25 meeting, and a few other issues that have come to my mind. The paper differs from the original primarily by:\r\n\r\nRestricting optional arguments to arguments with the INTENT(IN), VALUE, or no intent attributes.\r\n\r\nRequiring arguments with a default assignment to be explicitly given the DEFAULT attribute.\r\n\r\nForbidding arguments from having both the DEFAULT and OPTIONAL attributes so that the PRESENT function retains its semantics.\r\n\r\nAllowing the expression on the right of the default assignment be a restricted expression and not just a constant expression.\r\n\r\nStrongly encouraging that the default assignment be in the FUNCTION or SUBROUTINE statement (and not the TYPE declaration statement) as probably being easier to parse.\r\n\r\nDiscussing the implications of the constraints on intrinsic assignment, 10.2.1.2, their interpretation, 10.2.1.3, and the constraints on defined assignment, 10.2.1.4, and their interpretation, 10.2.1.5 on default array assignments.\r\n\r\nBriefly discussing the implications of an argument with the DEFAULT attribute also having any one of the POINTER, VOLATILE, ASYNCHRONOUS, or TARGET attributes.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/174",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/174/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/174/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/174/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/174",
    "id": 650774056,
    "node_id": "MDU6SXNzdWU2NTA3NzQwNTY=",
    "number": 174,
    "title": "Proposals from Amir Shahmoradi",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-03T21:40:31Z",
    "updated_at": "2020-07-04T04:58:25Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "@shahmoradi posted the following issues at #162, but I am moving them here. Let's create individual issues out of those, or add the comments there to already existing issues.\r\n\r\n> @certik Ondrej, I am not sure where my requests for enhancements should go on the J3 repository. So I am going to list it here and hopefully you will know much better or help realize where I should submit them:\r\n\r\n1.  Coarray slicing (equivalent of MPI_gather)\r\n    ```fortran  \r\n    real :: co_Vector[*]\r\n    real, allocatable :: LocalVector(:)\r\n    ...\r\n    LocalVector = co_Vector[ 1 : num_images() ]\r\n    ...\r\n    ```  \r\n    As far as I am aware, coarray slicing is currently not supported in Fortran 2018. This feature, however, is highly desired for writing a more concise code and potentially enabling more compiler optimization. The equivalent standard-conforming code would be:\r\n    ```fortran  \r\n    integer :: i\r\n    real :: co_Vector[*]\r\n    real, allocatable :: LocalVector(:)\r\n    ...\r\n    allocate( LocalVector(1 : num_images()) )\r\n    do i = 1, num_images()\r\n        LocalVector(i) = co_Vector[i]\r\n    end do\r\n    ...\r\n    ```  \r\n\r\n2.  the ability to use dummy optional arguments when not present in a procedure:\r\n    ```fortran  \r\n    function runSampler(chainSize)\r\n        integer, intent(in), optional :: chainSize\r\n        if (.not.present(chainSize)) chainSize = 10000\r\n        ...\r\n    ```  \r\n    This is similar to the RFE by [Curcic et al](https://github.com/j3-fortran/fortran_proposals/blob/master/proposals/default_optional_arguments/proposal.txt), so I won't explain it further here.   \r\n\r\n3.  standardized support for a minimal healthy subset of the C/Fortran preprocessing features. preprocessors are essential for writing scalable code and many compilers are fully or partially support some level of preprocessing. C has this as part of the language. Adding preprocessors to Fortran would ensure that the community's use of preprocessors is more disciplined and supported by the language standard.\r\n\r\n4.  further support for template metaprogramming. I know that this is already a highly popular RFE. So I just suffice to mention my strong support for it.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/173/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/173",
    "id": 630832372,
    "node_id": "MDU6SXNzdWU2MzA4MzIzNzI=",
    "number": 173,
    "title": "[Syntactic Sugar] chained comparisons",
    "user": {
      "login": "Libavius",
      "id": 35964644,
      "node_id": "MDQ6VXNlcjM1OTY0NjQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/35964644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Libavius",
      "html_url": "https://github.com/Libavius",
      "followers_url": "https://api.github.com/users/Libavius/followers",
      "following_url": "https://api.github.com/users/Libavius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Libavius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Libavius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Libavius/subscriptions",
      "organizations_url": "https://api.github.com/users/Libavius/orgs",
      "repos_url": "https://api.github.com/users/Libavius/repos",
      "events_url": "https://api.github.com/users/Libavius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Libavius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-04T13:37:07Z",
    "updated_at": "2020-06-04T17:07:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Allow for writing\r\n```Fortran\r\nif (1 < 2 < 3)\r\n```\r\ninstead of\r\n```Fortran\r\nif (1 < 2 .and. 2 < 3)\r\n```\r\nSimilar to python https://docs.python.org/3/reference/expressions.html#comparisons.\r\n\r\nI think, this is very much in the spirit of \"formula translation\" =)\r\n\r\n(Yup, this is nothing but syntactic sugar, but sugar is sweet)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/172",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/172/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/172/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/172/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/172",
    "id": 615253362,
    "node_id": "MDU6SXNzdWU2MTUyNTMzNjI=",
    "number": 172,
    "title": "Exceptions and Exception Handling",
    "user": {
      "login": "vansnyder",
      "id": 22599803,
      "node_id": "MDQ6VXNlcjIyNTk5ODAz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22599803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vansnyder",
      "html_url": "https://github.com/vansnyder",
      "followers_url": "https://api.github.com/users/vansnyder/followers",
      "following_url": "https://api.github.com/users/vansnyder/following{/other_user}",
      "gists_url": "https://api.github.com/users/vansnyder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vansnyder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vansnyder/subscriptions",
      "organizations_url": "https://api.github.com/users/vansnyder/orgs",
      "repos_url": "https://api.github.com/users/vansnyder/repos",
      "events_url": "https://api.github.com/users/vansnyder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vansnyder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2020-05-09T20:23:56Z",
    "updated_at": "2020-05-27T01:22:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Block-structured exception handling has been provided in other languages for decades.  According to \"Programming Languages: Principles and Practice,\" 2nd edition, by Kenneth C. Louden (a notable textbook on programming languages), ``Exception handling was pioneered by the language PL/I in the 1960s and significantly advanced in CLU in the 1970s. However, it was only in the 1980s and early 1990s that design questions were largely resolved.'' Ada 83, for which development began in 1976, is probably the first language that provided block-structured exception handling in the modern form.  It is generally agreed that exception handling is commonplace in all modern languages.\r\n\r\nIt has been observed that the CHANGE TEAM construct described in the 6 November 2014 draft of TS 18508 (ISO/IEC JTC1/SC22/WG5 paper N2033) is, in effect, an exception block, but with an intrinsic (and invisible) exception handler that only manages necessary synchronization and\r\ndeallocations.\r\n\r\nIt's time for Fortran to have a complete block-structured exception handling mechanism.  Block-structured exception handling has been proposed for Fortran, but has never been implemented.\r\n\r\nObjections have been raised to block-structured exception handling, usually citing performance degradation.  While some implementations of block-structured exception handling impose expense even if an exception does not occur, block-structured exception handling does not inevitably\r\nimpose a significant execution-time penalty if an exception does not occur.  For example, the Janus and Verdix Ada compilers' block-structured exception handling mechanisms impose very low cost if an exception does not occur, and the exception handling mechanism provided by the GNU Ada Translator (GNAT) imposes zero cost if an exception does not occur.\r\n\r\nThe cost of exception handling should not be confused with the cost of exception detection. An exception cannot be handled unless it is detected. Most processors have methods to specify whether certain exceptions, such as subscripts out of bounds, are detected. The cost of an exception handler is the additional cost to provide for handling an exception, if one is detected. Providing a mechanism to handle an exception does not require or imply that the processor is instructed to detect it. If the processor does detect it, the additional overhead to handle it is very\r\nsmall, or nonexistent, until the exception is detected. If the processor does not detect it, the additional overhead to handle an exception that cannot occur is very small, or nonexistent.\r\n[Exceptions_3.pdf](https://github.com/j3-fortran/fortran_proposals/files/4604435/Exceptions_3.pdf)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/170",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/170/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/170/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/170/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/170",
    "id": 615251572,
    "node_id": "MDU6SXNzdWU2MTUyNTE1NzI=",
    "number": 170,
    "title": "Support for containers",
    "user": {
      "login": "vansnyder",
      "id": 22599803,
      "node_id": "MDQ6VXNlcjIyNTk5ODAz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22599803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vansnyder",
      "html_url": "https://github.com/vansnyder",
      "followers_url": "https://api.github.com/users/vansnyder/followers",
      "following_url": "https://api.github.com/users/vansnyder/following{/other_user}",
      "gists_url": "https://api.github.com/users/vansnyder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vansnyder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vansnyder/subscriptions",
      "organizations_url": "https://api.github.com/users/vansnyder/orgs",
      "repos_url": "https://api.github.com/users/vansnyder/repos",
      "events_url": "https://api.github.com/users/vansnyder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vansnyder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-09T20:12:52Z",
    "updated_at": "2020-05-23T22:23:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I proposed a system to support development of containers at meeting 219 in Tokyo. It was ruled \"out of order,\" even though at meeting 216 in Berkeley WG5 had agreed to develop support for development of containers rather than to provide specific containers. The paper was 19-168, attached herewith.\r\n[19-168.pdf](https://github.com/j3-fortran/fortran_proposals/files/4604423/19-168.pdf)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/169",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/169/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/169/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/169/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/169",
    "id": 593205082,
    "node_id": "MDU6SXNzdWU1OTMyMDUwODI=",
    "number": 169,
    "title": "\"select rank()\" should be more permissive.",
    "user": {
      "login": "ChinouneMehdi",
      "id": 26184718,
      "node_id": "MDQ6VXNlcjI2MTg0NzE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26184718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChinouneMehdi",
      "html_url": "https://github.com/ChinouneMehdi",
      "followers_url": "https://api.github.com/users/ChinouneMehdi/followers",
      "following_url": "https://api.github.com/users/ChinouneMehdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChinouneMehdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChinouneMehdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChinouneMehdi/subscriptions",
      "organizations_url": "https://api.github.com/users/ChinouneMehdi/orgs",
      "repos_url": "https://api.github.com/users/ChinouneMehdi/repos",
      "events_url": "https://api.github.com/users/ChinouneMehdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChinouneMehdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-04-03T08:18:10Z",
    "updated_at": "2020-05-17T18:28:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "One of the new features in F2018 is assumed-rank arrays and \"select rank()\" construct.\r\n\r\nthe \"select rank()\" construct should be allowed to accept one or more scalar integer, like \"select case()\"\r\nexample:\r\n```Fortran\r\nsubroutine sub(a)\r\n  integer :: a(..)\r\n  select rank(a)\r\n    rank(0)\r\n      ...\r\n    rank(1:3)\r\n      ...\r\n    rank(4:)\r\n      ...\r\n  end select\r\nend subroutine sub\r\n```\r\nthis will allow for more generic programming.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/168",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/168/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/168/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/168/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/168",
    "id": 586549919,
    "node_id": "MDU6SXNzdWU1ODY1NDk5MTk=",
    "number": 168,
    "title": "Using mixedCase",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-23T22:11:42Z",
    "updated_at": "2020-06-05T05:03:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "@everythingfunctional wrote in https://github.com/j3-fortran/fortran_proposals/issues/56#issuecomment-602876857 and I am moving it to a separate issue here:\r\n\r\n> As a side note, what's the community consensus on mixed case? I've been working for the past few years under the assumption that it was ok to use mixed case as an aid to the reader, even if the compiler didn't care.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/167",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/167/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/167/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/167/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/167",
    "id": 577990336,
    "node_id": "MDU6SXNzdWU1Nzc5OTAzMzY=",
    "number": 167,
    "title": "Pros and Cons of making keywords reserved",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-09T15:26:36Z",
    "updated_at": "2020-03-17T21:23:40Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently Fortran has non-reserved keywords: words like `begin`, `end`, `subroutine`, `result` can be freely used as variable names, but they also have semantic meaning in the right context.\r\n\r\nHere is a full list of the non-reserved keywords:\r\n```\r\nabstract, all, allocatable, allocate, assignment, associate, asynchronous,\r\nbackspace, bind, block, call, case, character, class, close, codimension, \r\ncommon, complex, concurrent, contains, contiguous, continue, critical, cycle,\r\ndata, deallocate, default, deferred, dimension, do, dowhile, double, elemental,\r\nelse, end, endif, end, enddo, end, endwhere, entry, enum, enumerator,\r\nequivalence, errmsg, error, exit, extends, external, file, final, flush, \r\nforall, format, formatted, function, generic, go, if, implicit, import, impure,\r\nin, include, inout, inquire, integer, intent, interface, intrinsic, is, kind,\r\nlen, local, local_init, logical, module, mold, name, namelist, nopass,\r\nnon_intrinsic, non_overridable, non_recursive, none, nullify, only, open,\r\noperator, optional, out, parameter, pass, pointer, precision, print, private,\r\nprocedure, program, protected, public, pure, quiet, rank, read, real, \r\nrecursive, result, return, rewind, save, select, sequence, shared, source,     \r\nstat, stop, submodule, subroutine, target, team, team_number, then, to, type,\r\nunformatted, use, value, volatile, where, while, write\r\n```\r\n\r\nThe advantage of these being non-reserved keywords is that the standard can add new keywords in the future and they will not invalidate current code, because users can still use them as variable (or function, module, etc.) names.\r\n\r\nThe disadvantages are:\r\n\r\n* it makes the parsing much harder (and slower)\r\n* the automatic highlighting in editors, GitHub (see the example below) and elsewhere will incorrectly highlight variables such as `result` as if they were keywords, even though they are not in that context (that is because the syntax highlighters are based on regex expressions, as opposed to using a full Fortran parser that could disambiguate semi-reserved keywords)\r\n* it prevents potential new features such as #130 \r\n\r\nFurthermore, in my own codes and other codes, I recommend not to use these non-reserved keywords as variable names anyway. For example, one should not write code like this, even though it's strictly speaking valid:\r\n```fortran\r\ninteger function end(return,&\r\ninteger)result(function);;;;&\r\ninteger integer,return;;;;;;&\r\n;;function=return;if(return>&\r\ninteger)return;;;;;function=&\r\ninteger;;end function end;;;;\r\n```\r\n\r\nI opened this issue so that we can brainstorm what can be done about this. Here is an idea:\r\n\r\n* Standard will remain with non-reserved keywords (no change)\r\n* Compilers can provide warnings when a code uses a non-reserved keyword for variable / function / etc. names\r\n* As a community we will provide recommendation to enable the compiler warnings and ensure code is free of such warnings\r\n* If a compiler knows the code is not using non-reserved keywords for anything else than the actual keyword, then one can write much easier parsers for Fortran to enable better tooling (the tooling would only work for code that is warning free --- such as all my codes for example, so this would be very useful)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/166",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/166/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/166/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/166/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/166",
    "id": 577986750,
    "node_id": "MDU6SXNzdWU1Nzc5ODY3NTA=",
    "number": 166,
    "title": "bfloat16 in anticipation for hardware implementation.",
    "user": {
      "login": "srinathv",
      "id": 585481,
      "node_id": "MDQ6VXNlcjU4NTQ4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/585481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/srinathv",
      "html_url": "https://github.com/srinathv",
      "followers_url": "https://api.github.com/users/srinathv/followers",
      "following_url": "https://api.github.com/users/srinathv/following{/other_user}",
      "gists_url": "https://api.github.com/users/srinathv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/srinathv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/srinathv/subscriptions",
      "organizations_url": "https://api.github.com/users/srinathv/orgs",
      "repos_url": "https://api.github.com/users/srinathv/repos",
      "events_url": "https://api.github.com/users/srinathv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/srinathv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1619112162,
        "node_id": "MDU6TGFiZWwxNjE5MTEyMTYy",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/duplicate",
        "name": "duplicate",
        "color": "cfd3d7",
        "default": true,
        "description": "This issue or pull request already exists"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-09T15:21:33Z",
    "updated_at": "2020-03-09T15:37:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In light of possible hardware coming to the market with bfloat16 implemented what is the desire for the fortran community to support bfloat16? If not in the standard, is there a preferred way to approximate (or downcast)? ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/165",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/165/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/165/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/165/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/165",
    "id": 574500823,
    "node_id": "MDU6SXNzdWU1NzQ1MDA4MjM=",
    "number": 165,
    "title": "IEEE pi trigonometric functions",
    "user": {
      "login": "thenlich",
      "id": 13075200,
      "node_id": "MDQ6VXNlcjEzMDc1MjAw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13075200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thenlich",
      "html_url": "https://github.com/thenlich",
      "followers_url": "https://api.github.com/users/thenlich/followers",
      "following_url": "https://api.github.com/users/thenlich/following{/other_user}",
      "gists_url": "https://api.github.com/users/thenlich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thenlich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thenlich/subscriptions",
      "organizations_url": "https://api.github.com/users/thenlich/orgs",
      "repos_url": "https://api.github.com/users/thenlich/repos",
      "events_url": "https://api.github.com/users/thenlich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thenlich/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-03T08:35:05Z",
    "updated_at": "2020-03-03T11:05:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "To: J3                                                     J3/18-276r1\r\nFrom: Lorri Menard\r\nSubject: IEEE pi trigonometric functions\r\nDate: 2018-October-18\r\n\r\nI  Introduction\r\n\r\nAt m217 J3 agreed to consider adding [degree-argument](164) versions of\r\nsome of the trigonometric intrinsic functions.\r\n\r\nAs part of the discussion it was suggested that we also add the \r\nIEEE pi versions of the these same trigonometric intrinsic functions.\r\n\r\n\r\nII  Use cases\r\n\r\nThis provides a portable mechanism for programs that need to use\r\nthe standard IEEE \"pi\" functions.   It will \r\n\r\n\r\nIII What I have in mind\r\n\r\nOnly generic functions are to be added for these names, with \r\nbehavior to match that listed in IEEE 754 latest.\r\n\r\n- (*) ACOSPI     \r\n     ACOSPI(x) returns acos(x)/pi in the domain of [-1,+1]\r\n- (*) ASINPI\r\n     ASINPI(x) returns asin(x)/pi in the domain of [-1,+1]\r\n -  ATANPI\r\n     ATANPI(x)  returns atan(x)/pi in the domain of (-inf,+inf)\r\n -  COSPI\r\n     COSPI(x) returns cos(pi * x) in the domain of (-inf, +inf)\r\n -  SINPI\r\n     SINPI(x) returns sin(pi * x) in the domain of (-inf, +inf)\r\n- (*) [TANPI](http://754r.ucbtest.org/background/tanpi.txt)\r\n     TANPI(x) returns tan(pi * x) in the domain of (-inf, +inf)\r\n -  ATAN2PI\r\n     ATAN2PI(y,x) has a number of special rules, which should\r\n     be handled as described in IEEE 754-201x\r\n\r\nThe intrinsics marked with \"(*)\" weren't found in the IEEE 754-2008\r\nversion of the document, but we are assured that these are being\r\nadded to the next release of IEEE 754. \r\nAddendum:  Confirmed that these were found in the [IEEE 754-201x](http://754r.ucbtest.org/background/) \r\n  draft document.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/164",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/164/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/164/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/164/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/164",
    "id": 574166152,
    "node_id": "MDU6SXNzdWU1NzQxNjYxNTI=",
    "number": 164,
    "title": "Degree trigonometric functions",
    "user": {
      "login": "thenlich",
      "id": 13075200,
      "node_id": "MDQ6VXNlcjEzMDc1MjAw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13075200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thenlich",
      "html_url": "https://github.com/thenlich",
      "followers_url": "https://api.github.com/users/thenlich/followers",
      "following_url": "https://api.github.com/users/thenlich/following{/other_user}",
      "gists_url": "https://api.github.com/users/thenlich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thenlich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thenlich/subscriptions",
      "organizations_url": "https://api.github.com/users/thenlich/orgs",
      "repos_url": "https://api.github.com/users/thenlich/repos",
      "events_url": "https://api.github.com/users/thenlich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thenlich/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-03-02T18:35:53Z",
    "updated_at": "2020-03-05T07:41:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "To: J3                                                     J3/18-139r1\r\nFrom: Steve Lionel @sblionel\r\nSubject: Degree trigonometric functions\r\nDate: 2018-February-16\r\n\r\n[Many](https://gcc.gnu.org/onlinedocs/gfortran/Extended-math-intrinsics.html) [if](https://pubs.cray.com/content/S-3901/9.1/cray-fortran-reference-manual/intrinsic-procedures-and-modules) [not](https://docs.oracle.com/cd/E19205-01/820-4180/man3m/trig_sun.3m.html) most Fortran implementations support, as extensions,\r\ndegree-argument (or return value) versions of some of the trigonometric \r\nintrinsic functions, and these are widely used. In the spirit of \r\nstandardizing existing practice, we should add the following generic \r\nintrinsic functions to the standard:\r\n\r\n- ACOSD\r\n- ASIND\r\n- ATAN2D\r\n- ATAND\r\n- COSD\r\n- SIND\r\n- TAND\r\n\r\nAll of these would be similar to their radian counterparts\r\nexcept that the argument(s) or return values would be in degrees.\r\n\r\nDuring J3 discussion it was noted:\r\n- The hyperbolic functions (COSH, SINH, etc.) do not use radians and\r\n  therefore need no degree equivalents.\r\n- While ATAN2 is effectively replaced by the two-argument form of\r\n  ATAN, it was felt appropriate to include ATAN2D in support of\r\n  existing practice.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/163",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/163/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/163/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/163/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/163",
    "id": 574074021,
    "node_id": "MDU6SXNzdWU1NzQwNzQwMjE=",
    "number": 163,
    "title": "Meta: how proposals are developed",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1620320687,
        "node_id": "MDU6TGFiZWwxNjIwMzIwNjg3",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/meta",
        "name": "meta",
        "color": "e61df4",
        "default": false,
        "description": "Related to this repository"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "zjibben",
      "id": 3815279,
      "node_id": "MDQ6VXNlcjM4MTUyNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3815279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjibben",
      "html_url": "https://github.com/zjibben",
      "followers_url": "https://api.github.com/users/zjibben/followers",
      "following_url": "https://api.github.com/users/zjibben/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjibben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjibben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjibben/subscriptions",
      "organizations_url": "https://api.github.com/users/zjibben/orgs",
      "repos_url": "https://api.github.com/users/zjibben/repos",
      "events_url": "https://api.github.com/users/zjibben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjibben/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "zjibben",
        "id": 3815279,
        "node_id": "MDQ6VXNlcjM4MTUyNzk=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/3815279?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zjibben",
        "html_url": "https://github.com/zjibben",
        "followers_url": "https://api.github.com/users/zjibben/followers",
        "following_url": "https://api.github.com/users/zjibben/following{/other_user}",
        "gists_url": "https://api.github.com/users/zjibben/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zjibben/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zjibben/subscriptions",
        "organizations_url": "https://api.github.com/users/zjibben/orgs",
        "repos_url": "https://api.github.com/users/zjibben/repos",
        "events_url": "https://api.github.com/users/zjibben/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zjibben/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-02T16:00:46Z",
    "updated_at": "2020-03-02T23:29:20Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "@zjibben and I would like to summarize this in the README, so that we are all on the same page what the process is.\r\n\r\nIn fact, there seems to be a little disagreement how new features should be developed at the Committee. Some members of the Committee prefer to start with writing down requirements, pass it. Then develop specification (specs) based on the requirements. Pass it. Then develop syntax, pass it. And finally edits to the standard and pass it. 4 papers.\r\n\r\n@zjibben and I think we should instead use the following approach, which is similar, but different:\r\n\r\n1. **Proposal**: Develop a proposal that discusses use cases both before and after the feature. It discusses syntax and how the new feature should be used. The proposal does not have to have all the details fleshed out, but it needs to be clear to the reader what the feature should be and it concentrates on syntax and properties of the new feature.\r\n\r\n2. **Requirements**: From the Proposal, extract Requirements. \r\n\r\n3. **Specification**: From the Requirements only, logically derive Specification.\r\n\r\n4. **Syntax**: From the Specification, logically derive and propose Syntax.\r\n\r\n5. **Iterate**: Does 3. and 4. agree with the Proposal at 1. ? If it does not, then we need to iterate the process 1. - 4. until it agrees and is self consistent. \r\n\r\n6. **Edits**: Write Edits to the standard.\r\n\r\nThe advantage of this approach 1. - 6. is that it ensures both:\r\n\r\na) The feature is what the community wants (this is ensured by 1.)\r\n\r\nb) The feature is the best way to achieve something, i.e., there is not an alternate way to develop a feature (this is ensured by extracting the abstract requirements in 2. and then ensuring that the feature in 3. and 4. logically follows from it, and that it agrees with 1., as ensured in 5.)\r\n\r\nOn the other hand, by starting with Requirements right away, we ensure consistent feature, but we cannot ensure we end up with a feature that the community wants. In fact, by observing how features get developed at the Committee, very often we see features that are not what the community wants, because 1. was skipped, and we went straight to 2.\r\n\r\n### Example:\r\n\r\nAn example proposal that got recently passed by the Committee that follows this process is #161, where:\r\n\r\n1: https://j3-fortran.org/doc/year/18/18-273r1.txt\r\n2, 3, 4: https://j3-fortran.org/doc/year/19/19-201r1.txt\r\n5: In this case 3. and 4. agree with 1.\r\n6: https://j3-fortran.org/doc/year/20/20-116.txt\r\n\r\n\r\ncc @FortranFan.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/162",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/162/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/162/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/162/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/162",
    "id": 573377284,
    "node_id": "MDU6SXNzdWU1NzMzNzcyODQ=",
    "number": 162,
    "title": "Proposal List for 202X",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1622688632,
        "node_id": "MDU6TGFiZWwxNjIyNjg4NjMy",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/Fortran%20202x",
        "name": "Fortran 202x",
        "color": "bfd4f2",
        "default": false,
        "description": "Proposal targeting the next Fortran standard"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-29T18:32:31Z",
    "updated_at": "2020-07-03T21:41:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I will eventually create individual issues for each item in the list.\r\n\r\nFor now, the list is described in the document N2165 US Feature list proposals for F202X (PL22.3) as available from https://wg5-fortran.org/documents.html, but unfortunately the link is dead. We also found the list in the minutes N2169 Minutes of the August 2019 Meeting in Tokyo available from https://wg5-fortran.org/f202x.html. Just in case, I am attaching the N2169 document to this issue, so that it does not get lost.\r\n\r\nOnce all such ideas are fully developed and passed by the J3 and WG5 Committees, then the 202X standard will get out, and we will work on 202Y.\r\n\r\nIn order to speed up the 202X release as well as to ensure that the community agrees with the proposals that the committee passes, I encourage wide community participation in the proposals for these features.\r\n\r\n\r\n[ISO-IECJTC1-SC22-WG5_N2169_Minutes_of_the_August_2019_Meeting_in_Tokyo.txt](https://github.com/j3-fortran/fortran_proposals/files/4270725/ISO-IECJTC1-SC22-WG5_N2169_Minutes_of_the_August_2019_Meeting_in_Tokyo.txt)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/161",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/161/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/161/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/161/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/161",
    "id": 573056791,
    "node_id": "MDU6SXNzdWU1NzMwNTY3OTE=",
    "number": 161,
    "title": "US15 Simple procedures",
    "user": {
      "login": "zjibben",
      "id": 3815279,
      "node_id": "MDQ6VXNlcjM4MTUyNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3815279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjibben",
      "html_url": "https://github.com/zjibben",
      "followers_url": "https://api.github.com/users/zjibben/followers",
      "following_url": "https://api.github.com/users/zjibben/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjibben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjibben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjibben/subscriptions",
      "organizations_url": "https://api.github.com/users/zjibben/orgs",
      "repos_url": "https://api.github.com/users/zjibben/repos",
      "events_url": "https://api.github.com/users/zjibben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjibben/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1622688632,
        "node_id": "MDU6TGFiZWwxNjIyNjg4NjMy",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/Fortran%20202x",
        "name": "Fortran 202x",
        "color": "bfd4f2",
        "default": false,
        "description": "Proposal targeting the next Fortran standard"
      },
      {
        "id": 1620324570,
        "node_id": "MDU6TGFiZWwxNjIwMzI0NTcw",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/in%20progress",
        "name": "in progress",
        "color": "11b7e0",
        "default": false,
        "description": "J3 is moving forward"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-28T23:12:40Z",
    "updated_at": "2020-03-02T23:00:52Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "> A procedure that does not reference outside variables is easier to offload to a device, or other off-chip processor.\r\n\r\n> PURE procedures operate without writing to global variables beyond their arguments, SIMPLE procedures would be further restricted from referencing global variables beyond their arguments.\r\n\r\n* https://j3-fortran.org/doc/year/18/18-273r1.txt (initial proposal)\r\n* https://j3-fortran.org/doc/year/19/19-201r1.txt (requirements, specifications, and syntax)\r\n* https://j3-fortran.org/doc/year/20/20-116.txt (edits)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/160",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/160/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/160/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/160/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/160",
    "id": 573054938,
    "node_id": "MDU6SXNzdWU1NzMwNTQ5Mzg=",
    "number": 160,
    "title": "Auto-allocating processor messages",
    "user": {
      "login": "zjibben",
      "id": 3815279,
      "node_id": "MDQ6VXNlcjM4MTUyNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3815279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjibben",
      "html_url": "https://github.com/zjibben",
      "followers_url": "https://api.github.com/users/zjibben/followers",
      "following_url": "https://api.github.com/users/zjibben/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjibben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjibben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjibben/subscriptions",
      "organizations_url": "https://api.github.com/users/zjibben/orgs",
      "repos_url": "https://api.github.com/users/zjibben/repos",
      "events_url": "https://api.github.com/users/zjibben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjibben/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-02-28T23:06:30Z",
    "updated_at": "2020-03-09T15:39:38Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This feature is to address certain cases which require programmers to provide already-allocated strings of sufficient length, but the standard provides no mechanism to determine that length.\r\n\r\n* https://j3-fortran.org/doc/year/19/19-252r2.txt\r\n* https://j3-fortran.org/doc/year/20/20-122.txt",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/159",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/159/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/159/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/159/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/159",
    "id": 572476956,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzgxMTY3Mzcw",
    "number": 159,
    "title": "Namelist delimiter proposal update",
    "user": {
      "login": "marshallward",
      "id": 462315,
      "node_id": "MDQ6VXNlcjQ2MjMxNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/462315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marshallward",
      "html_url": "https://github.com/marshallward",
      "followers_url": "https://api.github.com/users/marshallward/followers",
      "following_url": "https://api.github.com/users/marshallward/following{/other_user}",
      "gists_url": "https://api.github.com/users/marshallward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marshallward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marshallward/subscriptions",
      "organizations_url": "https://api.github.com/users/marshallward/orgs",
      "repos_url": "https://api.github.com/users/marshallward/repos",
      "events_url": "https://api.github.com/users/marshallward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marshallward/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-28T02:15:29Z",
    "updated_at": "2020-02-28T02:27:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/pulls/159",
      "html_url": "https://github.com/j3-fortran/fortran_proposals/pull/159",
      "diff_url": "https://github.com/j3-fortran/fortran_proposals/pull/159.diff",
      "patch_url": "https://github.com/j3-fortran/fortran_proposals/pull/159.patch"
    },
    "body": "This patch contains two main modifications to the namelist delimiter\r\nproposal:\r\n\r\n1. The introduction has been modified for clarity and to include the\r\n   proposed change, rather than simply a discussion of the problem.\r\n\r\n2. The introduction and proposal sections have been modified to clarify\r\n   that list-directed output would be unaffected by the change.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/158",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/158/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/158/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/158/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/158",
    "id": 571525453,
    "node_id": "MDU6SXNzdWU1NzE1MjU0NTM=",
    "number": 158,
    "title": "US16 TYPEOF and CLASSOF",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1622688632,
        "node_id": "MDU6TGFiZWwxNjIyNjg4NjMy",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/Fortran%20202x",
        "name": "Fortran 202x",
        "color": "bfd4f2",
        "default": false,
        "description": "Proposal targeting the next Fortran standard"
      },
      {
        "id": 1620324570,
        "node_id": "MDU6TGFiZWwxNjIwMzI0NTcw",
        "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/labels/in%20progress",
        "name": "in progress",
        "color": "11b7e0",
        "default": false,
        "description": "J3 is moving forward"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-26T16:57:08Z",
    "updated_at": "2020-03-02T23:02:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The Committee is discussing a proposal for TYPEOF and CLASSOF.\r\n\r\nProposals:\r\n\r\nhttps://j3-fortran.org/doc/year/19/19-142r1.txt\r\nhttps://j3-fortran.org/doc/year/20/20-114.txt",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/157",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/157/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/157/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/157/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/157",
    "id": 571516399,
    "node_id": "MDU6SXNzdWU1NzE1MTYzOTk=",
    "number": 157,
    "title": "Rank-agnostic array element and section denotation",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-26T16:42:37Z",
    "updated_at": "2020-02-28T22:48:00Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The Committee is debating how to do \"Rank-agnostic array element and section denotation\".\r\n\r\nThere is disagreement on how to approach this, particularly between rank-1 integers vs a type. Many think the alternatives need to be explored more.\r\n\r\nPapers:\r\n\r\nhttps://j3-fortran.org/doc/year/19/19-150.txt\r\nhttps://j3-fortran.org/doc/year/19/19-173r1.txt\r\nhttps://j3-fortran.org/doc/year/19/19-202r2.txt\r\nhttps://j3-fortran.org/doc/year/20/20-113.txt (passed 10 v 5)\r\nhttps://j3-fortran.org/doc/year/20/20-115.txt\r\nhttps://j3-fortran.org/doc/year/20/20-120.txt\r\nhttps://j3-fortran.org/doc/year/20/20-124.txt\r\nhttps://j3-fortran.org/doc/year/20/20-125.txt Failed (5 v 7). Missing edits, and disagreement on types vs rank-1 integers, the options need to be explored more.\r\nhttps://j3-fortran.org/doc/year/20/20-126.txt\r\n\r\nhttps://j3-fortran.org/doc/year/19/19-253r1.txt (type-based array descriptors)\r\n\r\n### Basic Summary\r\n\r\n1.\r\n\r\n```\r\nA(@V)\r\n```\r\nis equivalent to\r\n```\r\nA(V(1), V(2), ..., V(size(V)))\r\n```\r\n\r\n2.\r\n```\r\n  A(@V1, :, @V2)\r\n```\r\nis equivalent to\r\n```\r\nA ( V1(1), V1(2) , ..., V1(size(V1)) , :, &\r\n    & V2(1), V2(2) , ..., V2(size(V2)) )\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/156",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/156/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/156/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/156/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/156",
    "id": 570916876,
    "node_id": "MDU6SXNzdWU1NzA5MTY4NzY=",
    "number": 156,
    "title": "Protected Components",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 30,
    "created_at": "2020-02-25T23:27:38Z",
    "updated_at": "2020-08-02T21:04:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "As part of #155, the committee is looking at protected components as part of\r\n\r\nUS 19 Protected Components\r\n\r\nhttps://j3-fortran.org/doc/year/18/18-265.txt\r\nhttps://j3-fortran.org/doc/year/19/19-135r1.txt\r\nhttps://j3-fortran.org/doc/year/19/19-161.txt\r\nhttps://j3-fortran.org/doc/year/19/19-214r1.txt\r\nhttps://j3-fortran.org/doc/year/20/20-106.txt\r\nhttps://j3-fortran.org/doc/year/20/20-121.txt",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/155",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/155/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/155/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/155/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/155",
    "id": 570208598,
    "node_id": "MDU6SXNzdWU1NzAyMDg1OTg=",
    "number": 155,
    "title": "February 2020 Fortran Meeting",
    "user": {
      "login": "certik",
      "id": 20568,
      "node_id": "MDQ6VXNlcjIwNTY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/20568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/certik",
      "html_url": "https://github.com/certik",
      "followers_url": "https://api.github.com/users/certik/followers",
      "following_url": "https://api.github.com/users/certik/following{/other_user}",
      "gists_url": "https://api.github.com/users/certik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/certik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/certik/subscriptions",
      "organizations_url": "https://api.github.com/users/certik/orgs",
      "repos_url": "https://api.github.com/users/certik/repos",
      "events_url": "https://api.github.com/users/certik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/certik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-24T23:22:55Z",
    "updated_at": "2020-02-29T19:06:02Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Fortran Committee Meeting February 24 - 28, 2020, Las Vegas, NV, USA\r\n\r\n# People\r\n\r\n1. Dan Nagle (NCAR)\r\n1. Steven Lionel (WG5) @sblionel \r\n1. Jon Steidel (Intel) @JonSteidel \r\n1. Bill Long (Cray / HPE) @longb\r\n1. Peter Klausler (Nvidia) @klausler \r\n1. Reuben Budiardja (ORNL) @reubendb\r\n1. Daniel Chen (IBM) @DanielCChen\r\n1. Brad Richardson (Structural Integrity) @everythingfunctional \r\n1. Brian Friesen (LBNL) @bcfriesen\r\n1. Erhard Ploedereder (WG23)\r\n1. Srinath Vadlamani (ARM) @srinathv\r\n1. Tom Clune (NASA) @tclune \r\n1. Gary Klimowicz (Nvidia) @gklimowicz \r\n1. Rich Bleikamp (AMD) @rbleikamp \r\n1. Van Sneider (JPL)\r\n1. Zach Jibben (LANL) @zjibben \r\n1. Malcolm Cohen (NAG)\r\n1. Stephen Michell (WG23)\r\n1. Ondřej Čertík (LANL) @certik \r\n1. Bob Corbett\r\n1. Vipul Parekh\r\n1. Damian Rouson (Sourcery, Inc.) @rouson\r\n1. Magne Haveraaen (University of Bergen)\r\n\r\n\r\n# Proposals Discussed at Plenary\r\n\r\n## Tuesday 2/25\r\n\r\n* #22: Default values of optional arguments (https://j3-fortran.org/doc/year/20/20-107.txt)\r\n\r\n## Wednesday 2/26\r\n \r\n* #157: Rank-agnostic array element and section denotation (https://j3-fortran.org/doc/year/20/20-113.txt, https://j3-fortran.org/doc/year/20/20-115.txt)\r\n* #158: TYPEOF and CLASSOF (https://j3-fortran.org/doc/year/20/20-114.txt)\r\n* #1: Namespace for modules (https://j3-fortran.org/doc/year/20/20-108.txt)\r\n* Interpretation: FORM TEAM and failed images (https://j3-fortran.org/doc/year/20/20-102r1.txt)\r\n* Interpretation: Collective subroutines and STAT= (https://j3-fortran.org/doc/year/20/20-104r1.txt)\r\n\r\n## Thursday 2/27\r\n\r\n* Interpretation: events that cause variables to become undefined (https://j3-fortran.org/doc/year/20/20-119.txt)\r\n* Edits for SIMPLE procedures (https://j3-fortran.org/doc/year/20/20-116.txt)\r\n* BFLOAT16 (https://j3-fortran.org/doc/year/20/20-118.txt)\r\n* #146: Interpretation: allocatable component finalization (https://j3-fortran.org/doc/year/20/20-117.txt)\r\n\r\n## Friday 2/28\r\n\r\n* #157: Rank-agnostic syntax (https://j3-fortran.org/doc/year/20/20-120.txt). Passed unanimously with minor changes.\r\n* #156: Protected components (https://j3-fortran.org/doc/year/20/20-121.txt). Withdrawn to address conflicting interests.\r\n* #160: Edits for auto-allocate characters (https://j3-fortran.org/doc/year/20/20-122.txt). Passed unanimously with minor changes.\r\n* Edits for procedure pointer association (https://j3-fortran.org/doc/year/20/20-123.txt). Passed unanimously.\r\n* #157: Edits for rank-agnostic bounds (https://j3-fortran.org/doc/year/20/20-124.txt). Withdrawn because some edits were missing and need to be added. There were concerns about fitting into the framework of generics later on.\r\n* #157: Edits for rank-agnostic array element and section denotation (https://j3-fortran.org/doc/year/20/20-125.txt). Failed (5 v 7). Missing edits, and disagreement on types vs rank-1 integers, the options need to be explored more.\r\n* #157: Edits for rank-agnostic allocation and pointer assignment (https://j3-fortran.org/doc/year/20/20-126.txt). Passed unanimously with minor changes.\r\n* Interpretation: Public namelist and private variable (https://j3-fortran.org/doc/year/20/20-127.txt). Straw vote (0 yes, 8 no, 9 undecided). Passed unanimously with \"no\" alternative.\r\n* Interpretation F18/015 (https://j3-fortran.org/doc/year/20/20-105.txt). Passed unanimously.\r\n\r\n\r\n# Future Plan\r\n\r\nThis was on the plan but we didn't get to it:\r\n\r\n* #5: US 27 POINTER dummy arguments, INTENT, and target modification (https://j3-fortran.org/doc/year/18/18-144r1.txt)\r\n* #19: Short-circuiting\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/153",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/153/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/153/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/153/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/153",
    "id": 569780088,
    "node_id": "MDU6SXNzdWU1Njk3ODAwODg=",
    "number": 153,
    "title": "General array indexing infrastructure",
    "user": {
      "login": "aradi",
      "id": 2452321,
      "node_id": "MDQ6VXNlcjI0NTIzMjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2452321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aradi",
      "html_url": "https://github.com/aradi",
      "followers_url": "https://api.github.com/users/aradi/followers",
      "following_url": "https://api.github.com/users/aradi/following{/other_user}",
      "gists_url": "https://api.github.com/users/aradi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aradi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aradi/subscriptions",
      "organizations_url": "https://api.github.com/users/aradi/orgs",
      "repos_url": "https://api.github.com/users/aradi/repos",
      "events_url": "https://api.github.com/users/aradi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aradi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-02-24T10:58:17Z",
    "updated_at": "2020-02-27T19:39:27Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The implementation of first the generic statistical functions in [stdlib](https://github.com/fortran-lang/stdlib) exposed the lack of a general array indexing infrastructure of Fortran. For example, in the [experimental implementation of a generic `mean()` function](https://github.com/fortran-lang/stdlib/blob/bb852d232d4dfa0c82f401db15570e93674482aa/src/stdlib_experimental_stats_mean.fypp) one has to generate a separate function for each possible rank. It would be nice, if Fortran offered an infrastructure which makes the generation of this vast amount of routines unnecessary. Let's collect in this issue, what we would need for that:\r\n\r\nI my opinion, we lack following features for the moment:\r\n\r\n*  Possibility for a function to return an array with a rank unknown at compile time (the array should not be necessary an allocatable one!)\r\n* General indexing scheme, which allows accessing arrays / strides / slices in an array without the usual comma-separated index notation. (Funny enough, the Fortran 2018 C-interoperability makes that possible, but only in C! It would be nice, if he had similar tools in Fortran!)\r\n\r\nAs a proof of concept, let's require functionality which enables to write a function, which just wraps the `sum()` intrinsic (taken from #144).\r\n```\r\nmodule test\r\n  implicit none\r\n\r\ncontains\r\n\r\n  function sum_wrapper(array, dim) result(redarray)\r\n    real, dimension(..), intent(in) :: array\r\n    integer, intent(in) :: dim\r\n    ! Dimension would be an array of \"slice-types\" allowing dynamic\r\n    ! determination of the shape of the returned array\r\n    real, dimension(get_redarray_shape(array, dim)) :: redarray\r\n\r\n    redarray(get_redarray_shape(array, dim)) = sum(array, dim=dim)\r\n\r\n  end function sum_wrapper\r\n\r\n\r\n  pure function get_redarray_shape(array, dim) result(redshape)\r\n    real, dimension(..), intent(in) :: array\r\n    integer, intent(in) :: dim\r\n    type(slice), dimension(rank(array) - 1) :: redshape\r\n    integer :: ii\r\n\r\n    do ii = 1, dim - 1\r\n      ! With the intrinsic function get_slices, we should get access to the\r\n      ! slicing parameters of the array (similar, how you can do it in C since\r\n      ! Fortran 2018)\r\n      redshape(ii) = get_slices(array, dim=ii)\r\n    end do\r\n    do ii = dim + 1, rank(array)\r\n      redshape(ii - 1) = get_slices(array, dim=ii)\r\n    end do\r\n\r\n  end function get_redarray_shape\r\n\r\nend module test\r\n```\r\nHaving functionality along those lines (eventually combined with the one described in #144) would enable to write rank-agnostic general functions, on par with the intrinsic `sum()` and `product()` functions.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/146",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/146/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/146/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/146/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/146",
    "id": 569190707,
    "node_id": "MDU6SXNzdWU1NjkxOTA3MDc=",
    "number": 146,
    "title": "Finalization order for complex objects: official interpretation needed?",
    "user": {
      "login": "nncarlson",
      "id": 7231327,
      "node_id": "MDQ6VXNlcjcyMzEzMjc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7231327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nncarlson",
      "html_url": "https://github.com/nncarlson",
      "followers_url": "https://api.github.com/users/nncarlson/followers",
      "following_url": "https://api.github.com/users/nncarlson/following{/other_user}",
      "gists_url": "https://api.github.com/users/nncarlson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nncarlson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nncarlson/subscriptions",
      "organizations_url": "https://api.github.com/users/nncarlson/orgs",
      "repos_url": "https://api.github.com/users/nncarlson/repos",
      "events_url": "https://api.github.com/users/nncarlson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nncarlson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 48,
    "created_at": "2020-02-21T21:21:54Z",
    "updated_at": "2020-06-13T00:23:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "@certik asked that I share this here.\r\n\r\nI've encountered an issue with finalization that is illustrated by the example that follows. There is a parent type and child type that extends the parent, each with a final subroutine. The child type has two derived type components, one allocatable, the other not. The component types also have final subroutines.  The point of the example is to reveal the order in which the final subroutines are called.\r\n\r\nTwo compilers produce the results I expected, namely the string \"CABP\" for Child, component A, component B, and Parent.  \"CBAP\" would have been equally acceptable.  A third compiler produces the string \"CBPA\".  The preliminary response from the vendor of the latter compiler is that the standard is ambiguous with conflicting requirements and that choice of behavior is arguably valid. They did go into some explanation, but I haven't yet understood their argument. I'll be following up with them, and as I understand more I'll comment here with it. Section 7.5.6.2 (2018) seems pretty clear to me (arguing for \"CABP\") but there may well be other parts of the standard that are inconsistent with it -- I have a lot of respect for this vendor. If an official interpretation and standard clarification is required I would strongly urge for \"CABP\".\r\n\r\n[Edit] The core question here is why does the third compiler vendor believe the allocatable component A have to be finalized last after the parent, whereas the non-allocatable component B should be finalized before the parent.\r\n\r\nHere is the example\r\n```fortran\r\nmodule child_type\r\n\r\n  implicit none\r\n  private\r\n\r\n  type :: objectA\r\n  contains\r\n    final :: finalize_objectA\r\n  end type\r\n\r\n  type :: objectB\r\n  contains\r\n    final :: finalize_objectB\r\n  end type\r\n\r\n  type :: parent\r\n  contains\r\n    final :: finalize_parent\r\n  end type\r\n\r\n  type, extends(parent), public :: child\r\n    type(objectA), allocatable :: A\r\n    type(objectB) :: B\r\n  contains\r\n    procedure :: init\r\n    final :: finalize_child\r\n  end type\r\n\r\ncontains\r\n\r\n  subroutine finalize_objectA(this)\r\n    type(objectA), intent(inout) :: this\r\n    write(*,'(\"A\")',advance='no')\r\n  end subroutine\r\n\r\n  subroutine finalize_objectB(this)\r\n    type(objectB), intent(inout) :: this\r\n    write(*,'(\"B\")',advance='no')\r\n  end subroutine\r\n\r\n  subroutine finalize_parent(this)\r\n    type(parent), intent(inout) :: this\r\n    write(*,'(\"P\")',advance='no')\r\n  end subroutine\r\n\r\n  subroutine finalize_child(this)\r\n    type(child), intent(inout) :: this\r\n    write(*,'(\"C\")',advance='no')\r\n  end subroutine\r\n\r\n  subroutine init(this)\r\n    class(child), intent(inout) :: this\r\n    allocate(this%A)\r\n  end subroutine\r\n\r\nend module\r\n\r\nprogram main\r\n  use child_type\r\n  call run\r\ncontains\r\n  subroutine run\r\n    type(child) :: c\r\n    call c%init\r\n  end subroutine\r\nend program\r\n```\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/144",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/144/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/144/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/144/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/144",
    "id": 565245269,
    "node_id": "MDU6SXNzdWU1NjUyNDUyNjk=",
    "number": 144,
    "title": "Generic processing of assumed rank objects",
    "user": {
      "login": "reinh-bader",
      "id": 15558025,
      "node_id": "MDQ6VXNlcjE1NTU4MDI1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15558025?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reinh-bader",
      "html_url": "https://github.com/reinh-bader",
      "followers_url": "https://api.github.com/users/reinh-bader/followers",
      "following_url": "https://api.github.com/users/reinh-bader/following{/other_user}",
      "gists_url": "https://api.github.com/users/reinh-bader/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reinh-bader/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reinh-bader/subscriptions",
      "organizations_url": "https://api.github.com/users/reinh-bader/orgs",
      "repos_url": "https://api.github.com/users/reinh-bader/repos",
      "events_url": "https://api.github.com/users/reinh-bader/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reinh-bader/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-14T10:42:03Z",
    "updated_at": "2020-02-24T10:59:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The concept of assumed rank permits definition of interfaces that are rank-agnostic. \r\nThe addition of the SELECT RANK block construct permits definitions and references to the object by resolving at run time to whatever rank the actual argument has. This is fine in case the array rank e.g. reflects different problem dimensions, requiring different algorithms for its solution. However, there are also cases in which uniform treatment of the argument's data irrespective of its rank is required. This is currently cumbersome to do.\r\n\r\nThis proposal suggests supporting this at least for the case of a CONTIGUOUS argument by remapping to a suitable rank-1 entity. \r\n\r\nVariant 1: Permit pointer assignment\r\n\r\nAssuming declarations\r\nREAL, CONTIGUOUS, TARGET :: X(..)\r\nREAL, POINTER :: XP(:)\r\nit should be permissible to write\r\nXP(1:SIZE(X)) => X\r\nNote that for X assumed shape and any rank, this is already permitted. Some words would be needed to treat the rank 0 and rank \"*\" cases. The data in X could then be processed via XP.\r\n\r\nVariant 2: Extend ASSOCIATE semantics\r\n\r\nAssuming a declaration \r\nREAL, CONTIGUOUS :: X(..)\r\nit should be permissible to write\r\nASSOCIATE(XA(1:SIZE(X)) => X)\r\n   ... ! definitions and references to XA\r\nEND ASSOCIATE\r\n\r\nThis variant would not require the TARGET attribute on X. Inside the ASSOCIATE block, the data could be processed via XA.\r\n\r\nRequiring the CONTIGUOUS attribute imposes no limitation on functionality. Users need to be made aware of the potential performance impact for copy-in/out.\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/141",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/141/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/141/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/141/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/141",
    "id": 550228574,
    "node_id": "MDU6SXNzdWU1NTAyMjg1NzQ=",
    "number": 141,
    "title": "Treat tab characters in list-directed input as a separator like a comma",
    "user": {
      "login": "arjenmarkus",
      "id": 1829959,
      "node_id": "MDQ6VXNlcjE4Mjk5NTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1829959?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arjenmarkus",
      "html_url": "https://github.com/arjenmarkus",
      "followers_url": "https://api.github.com/users/arjenmarkus/followers",
      "following_url": "https://api.github.com/users/arjenmarkus/following{/other_user}",
      "gists_url": "https://api.github.com/users/arjenmarkus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arjenmarkus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arjenmarkus/subscriptions",
      "organizations_url": "https://api.github.com/users/arjenmarkus/orgs",
      "repos_url": "https://api.github.com/users/arjenmarkus/repos",
      "events_url": "https://api.github.com/users/arjenmarkus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arjenmarkus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-15T14:43:07Z",
    "updated_at": "2020-01-23T08:54:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Currently, tab characters read via list-directed input are not considered special in contrast to commas (or semicolons, if the file that is being read is opened with DECIMAL='COMMA'). Tab characters are very commonly used, however, to separate fields - for instance in CSV files. It would be nice if a tab character would be treated in the same way as a comma/semicolon. \r\nMore specifically: a single tab separates two fields (numerical or character or ..), two consecutive tabs separate an empty position and the corresponding variable in the READ statement would not be changed, just as with two consecutive commas. In fact, the treatment of a tab should be exactly the same as a comma (or semicolon).\r\nThis will introduce a backward incompatibility., To avoid that, the OPEN statement could be used in the same way as the keyword DECIMAL changes the meaning of a comma to attach this meaning to the tab character. Something along the lines of:\r\nOPEN( NEWUNIT=lun, FILE='input.csv', TAB='SEPARATOR' )\r\nAlternatively: TAB='CHARACTER' to indicate no special treatment of tab characters should be applied. This would be the default.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/139",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/139/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/139/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/139/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/139",
    "id": 548456363,
    "node_id": "MDU6SXNzdWU1NDg0NTYzNjM=",
    "number": 139,
    "title": "Arrays of procedure pointers",
    "user": {
      "login": "rjfarmer",
      "id": 10981326,
      "node_id": "MDQ6VXNlcjEwOTgxMzI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10981326?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjfarmer",
      "html_url": "https://github.com/rjfarmer",
      "followers_url": "https://api.github.com/users/rjfarmer/followers",
      "following_url": "https://api.github.com/users/rjfarmer/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjfarmer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjfarmer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjfarmer/subscriptions",
      "organizations_url": "https://api.github.com/users/rjfarmer/orgs",
      "repos_url": "https://api.github.com/users/rjfarmer/repos",
      "events_url": "https://api.github.com/users/rjfarmer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjfarmer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-11T17:23:18Z",
    "updated_at": "2020-06-25T00:19:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I propose adding the ability for procedure pointers to be arrays, thus making something like this valid:\r\n\r\n    procedure(afunc), pointer, dimension(:) :: funcptr\r\n\r\nThis would allow building up \"lists\" of functions to be created that can be passed to a function to \"process\", or to make it easier to call different functions based on some index value. This would also make procedure pointers similar to other objects (and pointers) like ints, floats, derived types etc which can be arrays.\r\n\r\nUse cases:\r\n    \r\n    allocate(funcptr(3))\r\n    null(funcptr)\r\n    funcptr(1) => function1\r\n    funcptr(2) => null()\r\n    funcptr(3) =>  function3\r\n\r\n    call some_routine(funcptr)\r\n    deallocate(funcptr)\r\n \r\n    subroutine some_routine(funcptr)\r\n        do i=1,size(funcptr)\r\n              if(associated(funcptr(i))) call funcptr(i)\r\n        end do\r\n\r\nDifferent use case (which i have in my code)\r\n\r\n    SELECT CASE (id)\r\n    case(1)\r\n        ptr => func1\r\n    case(2)\r\n        ptr => func2\r\n    .....\r\n\r\n    call ptr()\r\n\r\nWhich could be made cleaner with:\r\n \r\n     ! Inside an init function\r\n     funcptr(1) => function1\r\n     funcptr(2) => function2   \r\n\r\n     ! Calling code\r\n     call funcptr(id)\r\n\r\n\r\nCurrently you can do something similar if you do\r\n\r\n    type mytype\r\n         procedure(afunc), pointer :: ptr\r\n    end type mytype\r\n  \r\n    type(mytype), allocatable, dimension(:) :: funcptr\r\n\r\nBut this just hides whats going on and is no-obvious to a user/(me) why the pointer needs to be put inside a derived type (when you can have real, pointer, dimension(:) ). \r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/138",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/138/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/138/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/138/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/138",
    "id": 548374082,
    "node_id": "MDU6SXNzdWU1NDgzNzQwODI=",
    "number": 138,
    "title": "CHARACTER arguments on MERGE() should b",
    "user": {
      "login": "urbanjost",
      "id": 29845229,
      "node_id": "MDQ6VXNlcjI5ODQ1MjI5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29845229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/urbanjost",
      "html_url": "https://github.com/urbanjost",
      "followers_url": "https://api.github.com/users/urbanjost/followers",
      "following_url": "https://api.github.com/users/urbanjost/following{/other_user}",
      "gists_url": "https://api.github.com/users/urbanjost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/urbanjost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/urbanjost/subscriptions",
      "organizations_url": "https://api.github.com/users/urbanjost/orgs",
      "repos_url": "https://api.github.com/users/urbanjost/repos",
      "events_url": "https://api.github.com/users/urbanjost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/urbanjost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-11T03:25:46Z",
    "updated_at": "2020-01-16T02:19:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The requirement that the CHARACTER arguments to MERGE() must be of the\r\nsame length prevents it from being used in a straight-forward manner.\r\n\r\nIn normal assignments the RHS would be padded or truncated to the size\r\nof the LHS, or the LHS would be allocated to the size of the RHS.\r\n\r\nThis is also true if testing strings for equality.\r\n\r\nThe following code will fail on the third call to SHOW() in a\r\nstandard-compliant programming environment.\r\n\r\n```fortran\r\nprogram main\r\n   call show('1234567')\r\n   call show('12345678') ! unequal lengths\r\n   call show()           ! unequal lengths\r\n   call show('123456')   ! unequal lengths\r\ncontains\r\n\r\n   subroutine show(a)\r\n      character(len=*),optional :: a\r\n      character(len=:),allocatable :: a_local\r\n      a_local=merge(a,'DEFAULT',present(a))\r\n      write(*,'(a)')'value=['//a//']'\r\n   end subroutine show\r\n\r\n   end program main\r\n```\r\n\r\nThe compilers I tried detect this even at run-time and throw a descriptive\r\nmessage. They should correct for the difference in length there, and the\r\ndocumentation can describe that if the lengths are not the same that the\r\nfunction may run less efficiently instead of not allowing for the difference.\r\n\r\nI do not have a strong opinion on whether the returned value should be the length of the longer argument or the same as the original that was selected. \r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/136",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/136/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/136/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/136/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/136",
    "id": 548226960,
    "node_id": "MDU6SXNzdWU1NDgyMjY5NjA=",
    "number": 136,
    "title": "Allow stream I/O on pre-attached stdin and stdout",
    "user": {
      "login": "urbanjost",
      "id": 29845229,
      "node_id": "MDQ6VXNlcjI5ODQ1MjI5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29845229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/urbanjost",
      "html_url": "https://github.com/urbanjost",
      "followers_url": "https://api.github.com/users/urbanjost/followers",
      "following_url": "https://api.github.com/users/urbanjost/following{/other_user}",
      "gists_url": "https://api.github.com/users/urbanjost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/urbanjost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/urbanjost/subscriptions",
      "organizations_url": "https://api.github.com/users/urbanjost/orgs",
      "repos_url": "https://api.github.com/users/urbanjost/repos",
      "events_url": "https://api.github.com/users/urbanjost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/urbanjost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-10T18:29:33Z",
    "updated_at": "2020-01-12T21:32:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\nThe ability to read a stream from stdin, and to write a stream to stdout would be very useful to make filter programs especially so programs can be used in pipes with binary data.\r\n\r\nA primary use of stream I/O is for creating programs that can\r\n be used in pipes on systems that support it.  There is no standard way to reopen the preattached files connected to stdin and stdout as streams to support generating such applications.  Non-advancing I/O does not solve the problem primarily because of there being a limit on line length and for other well-documented reasons. \r\n\r\nCalling the C routines via the ISO_C_BINDING interface is the work-around I have  seen used the most.  If possible, an OPEN on the pre-attached files that allowed changing them to STREAM I/O and optionally binary seems like it would be the nicest syntax.  Although far less preferred by  myself even new  intrinsics like GETC() and PUTC() that mirrored the C functions of the same name\r\nwould be better than the current state.  Note that in some programming environments you can do an INQUIRE() on the units and close and reopen them, but not on others.  And there is the complication that you can usually only do that for the units defined by\r\n\r\nuse, intrinsic :: iso_fortran_env, only : stdin=>input_unit, stdout=>output_unit, stderr=>error_unit\r\n\r\nand not necessarily the ones representing by \"*\".   Not having this as a standard capability greatly limits the construction of filters using Fortran.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/135",
    "repository_url": "https://api.github.com/repos/j3-fortran/fortran_proposals",
    "labels_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/135/labels{/name}",
    "comments_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/135/comments",
    "events_url": "https://api.github.com/repos/j3-fortran/fortran_proposals/issues/135/events",
    "html_url": "https://github.com/j3-fortran/fortran_proposals/issues/135",
    "id": 548156295,
    "node_id": "MDU6SXNzdWU1NDgxNTYyOTU=",
    "number": 135,
    "title": "Namelist object designators may have blanks following commas",
    "user": {
      "login": "marshallward",
      "id": 462315,
      "node_id": "MDQ6VXNlcjQ2MjMxNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/462315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marshallward",
      "html_url": "https://github.com/marshallward",
      "followers_url": "https://api.github.com/users/marshallward/followers",
      "following_url": "https://api.github.com/users/marshallward/following{/other_user}",
      "gists_url": "https://api.github.com/users/marshallward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marshallward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marshallward/subscriptions",
      "organizations_url": "https://api.github.com/users/marshallward/orgs",
      "repos_url": "https://api.github.com/users/marshallward/repos",
      "events_url": "https://api.github.com/users/marshallward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marshallward/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-01-10T15:55:57Z",
    "updated_at": "2020-01-17T20:04:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently, the following namelist is invalid:\r\n```\r\nidx_nml\r\n   v(1, 1) = 5\r\n   v(2, 1) = 5\r\n/\r\n```\r\nThe reason is because the object designator (e.g. `v(1, 1)`) of a namelist may not contain any blanks (13.11.2p2, last sentence):\r\n\r\n> Each designator may be preceded and followed by one or more optional blanks but shall not contain embedded blanks.\r\n\r\nThere is no such restriction AFAIK in Fortran itself.\r\n\r\nDespite this restriction, such spaces are permitted in every compiler that I have tested (gfortran, ifort, Cray, PGI).  The exception is NAG Fortran, which is correctly adhering to the standard.\r\n\r\n[Some discussion here, for the interested](https://github.com/marshallward/f90nml/issues/75).\r\n\r\nI would suggest that the final sentence be removed from this paragraph of the standard, if only because it is inconsistent with Fortran source code, and because hardly anyone appears to be following this rule anyway without any apparent side-effects.",
    "performed_via_github_app": null
  }
]
